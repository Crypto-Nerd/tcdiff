--- ./Boot/Windows/Decompressor.c	2012-02-07 14:36:48.000000000 +0400
+++ ../veracrypt_1.17_Source/src/Boot/Windows/Decompressor.c	2016-02-14 12:11:21.000000000 +0300
@@ -23,6 +23,7 @@
 */
 
 /* Adapted for TrueCrypt */
+/* Adapted for VeraCrypt */
 
 
 #define local static            /* for local function definitions */
@@ -47,6 +48,7 @@
 
     /* input state */
     unsigned char *in;          /* input buffer */
+    unsigned int inlen;			 /* available input at in */
     unsigned int incnt;        /* bytes read so far */
     int bitbuf;                 /* bit buffer */
     int bitcnt;                 /* number of bits in bit buffer */
@@ -81,6 +83,9 @@
     s->bitbuf = 0;
     s->bitcnt = 0;
 
+    if (s->incnt + 4 > s->inlen)
+        return 2;                               /* not enough input */
+
     /* get length and check against its one's complement */
     len = s->in[s->incnt++];
     len |= s->in[s->incnt++] << 8;
@@ -88,6 +93,9 @@
         s->in[s->incnt++] != ((~len >> 8) & 0xff))
         return -2;                              /* didn't match complement! */
 
+    if (s->incnt + len > s->inlen)
+        return 2;                               /* not enough input */
+
     /* copy len bytes from in to out */
     if (s->out != NIL) {
         if (s->outcnt + len > s->outlen)
@@ -110,6 +118,8 @@
     short *symbol;      /* canonically ordered symbols */
 };
 
+/* reduce code size by using slow version of the decompressor */
+#define SLOW
 
 #ifdef SLOW
 local int decode(struct state *s, struct huffman *h)
@@ -265,7 +275,7 @@
 
             /* get and check distance */
             symbol = decode(s, distcode);
-            if (symbol < 0) return symbol;      /* invalid symbol */
+            if (symbol < 0) return symbol;          /* invalid symbol */
             dist = dists[symbol] + bits(s, dext[symbol]);
             if (dist > s->outcnt)
                 return -10;     /* distance too far back */
@@ -363,26 +373,38 @@
         int len;                /* last length to repeat */
 
         symbol = decode(s, &lencode);
+        if (symbol < 0)
+            return symbol;          /* invalid symbol */
         if (symbol < 16)                /* length in 0..15 */
             lengths[index++] = symbol;
         else {                          /* repeat instruction */
             len = 0;                    /* assume repeating zeros */
-            if (symbol == 16) {         /* repeat last length 3..6 times */
-                if (index == 0) return -5;      /* no last length! */
-                len = lengths[index - 1];       /* last length */
-                symbol = 3 + bits(s, 2);
-            }
-            else if (symbol == 17)      /* repeat zero 3..10 times */
-                symbol = 3 + bits(s, 3);
-            else                        /* == 18, repeat zero 11..138 times */
-                symbol = 11 + bits(s, 7);
-            if (index + symbol > nlen + ndist)
+            switch(symbol)
+            {
+               case 16: {         /* repeat last length 3..6 times */
+                  if (index == 0) return -5;      /* no last length! */
+                  len = lengths[index - 1];       /* last length */
+                  symbol = 3 + bits(s, 2);
+                  break;
+               }
+               case  17:      /* repeat zero 3..10 times */
+                  symbol = 3 + bits(s, 3);
+                  break;
+               default:                  /* == 18, repeat zero 11..138 times */
+                   symbol = 11 + bits(s, 7);
+                   break;
+             }
+            if ((index + symbol > nlen + ndist))
                 return -6;              /* too many lengths! */
             while (symbol--)            /* repeat last or zero symbol times */
                 lengths[index++] = len;
         }
     }
 
+    /* check for end-of-block code -- there better be one! */
+    if (lengths[256] == 0)
+        return -9;
+
     /* build huffman table for literal/length codes */
     err = construct(&lencode, lengths, nlen);
     if (err < 0 || (err > 0 && nlen - lencode.count[0] != 1))
@@ -401,36 +423,50 @@
 void _acrtused () { }
 
 // Decompress deflated data
-int far main (
-         unsigned char *dest,         /* pointer to destination pointer */
-         unsigned int destlen,        /* amount of output space */
-         unsigned char *source)       /* pointer to source data pointer */
-{
-    struct state s;             /* input/output state */
-    int last, type;             /* block information */
-    int err;                    /* return value */
-
-    /* initialize output state */
-    s.out = dest;
-    s.outlen = destlen;                /* ignored if dest is NIL */
-    s.outcnt = 0;
-
-    /* initialize input state */
-    s.in = source;
-    s.incnt = 0;
-    s.bitbuf = 0;
-    s.bitcnt = 0;
-
-	/* process blocks until last block or error */
-	do {
-		last = bits(&s, 1);         /* one if last block */
-		type = bits(&s, 2);         /* block type 0..3 */
-		err = type == 0 ? stored(&s) :
-			(type == 1 ? fixed(&s) :
-			(type == 2 ? dynamic(&s) :
-			-1));               /* type == 3, invalid */
-		if (err != 0) break;        /* return with error */
-	} while (!last);
-
-	return err;
+int far main (
+         unsigned char *dest,         /* pointer to destination pointer */
+         unsigned int destlen,        /* amount of output space */
+         unsigned char *source,       /* pointer to source data pointer */
+         unsigned int sourcelen)
+{
+    struct state s;             /* input/output state */
+    int last, type;             /* block information */
+    int err;                    /* return value */
+
+    /* initialize output state */
+    s.out = dest;
+    s.outlen = destlen;                /* ignored if dest is NIL */
+    s.outcnt = 0;
+
+    /* initialize input state */
+    s.in = source;
+    s.inlen = sourcelen;
+    s.incnt = 0;
+    s.bitbuf = 0;
+    s.bitcnt = 0;
+
+	/* process blocks until last block or error */
+	do {
+		last = bits(&s, 1);         /* one if last block */
+		type = bits(&s, 2);         /* block type 0..3 */
+		switch(type)
+		{
+		case 0:
+			err = stored(&s);
+			break;
+		case 1:
+			err = fixed(&s);
+			break;
+		case 2:
+			err = dynamic(&s);
+			break;
+		default:
+			err = -1; /* type == 3, invalid */
+			break;
+		}
+
+		if (err != 0) break;        /* return with error */
+	} while (!last);
+
+	return err;
 }
