--- ./Main/Forms/VolumePasswordPanel.cpp	2012-02-07 14:36:48.000000000 +0400
+++ ../veracrypt_1.17_Source/src/Main/Forms/VolumePasswordPanel.cpp	2016-02-14 12:11:21.000000000 +0300
@@ -1,9 +1,13 @@
 /*
- Copyright (c) 2008 TrueCrypt Developers Association. All rights reserved.
-
- Governed by the TrueCrypt License 3.0 the full text of which is contained in
- the file License.txt included in TrueCrypt binary and source code distribution
- packages.
+ Derived from source code of TrueCrypt 7.1a, which is
+ Copyright (c) 2008-2012 TrueCrypt Developers Association and which is governed
+ by the TrueCrypt License 3.0.
+
+ Modifications and additions to the original source code (contained in this file) 
+ and all other portions of this file are Copyright (c) 2013-2016 IDRIX
+ and are governed by the Apache License 2.0 the full text of which is
+ contained in the file License.txt included in VeraCrypt binary and source
+ code distribution packages.
 */
 
 #include "System.h"
@@ -12,10 +16,10 @@
 #include "VolumePasswordPanel.h"
 #include "SecurityTokenKeyfilesDialog.h"
 
-namespace TrueCrypt
+namespace VeraCrypt
 {
-	VolumePasswordPanel::VolumePasswordPanel (wxWindow* parent, shared_ptr <VolumePassword> password, shared_ptr <KeyfileList> keyfiles, bool enableCache, bool enablePassword, bool enableKeyfiles, bool enableConfirmation, bool enablePkcs5Prf, const wxString &passwordLabel)
-		: VolumePasswordPanelBase (parent), Keyfiles (new KeyfileList)
+	VolumePasswordPanel::VolumePasswordPanel (wxWindow* parent, MountOptions* options, shared_ptr <VolumePassword> password, bool disableTruecryptMode, shared_ptr <KeyfileList> keyfiles, bool enableCache, bool enablePassword, bool enableKeyfiles, bool enableConfirmation, bool enablePkcs5Prf, bool isMountPassword, const wxString &passwordLabel)
+		: VolumePasswordPanelBase (parent), Keyfiles (new KeyfileList), EnablePimEntry (true)
 	{
 		if (keyfiles)
 		{
@@ -54,6 +58,15 @@
 		PasswordStaticText->Show (enablePassword);
 		PasswordTextCtrl->Show (enablePassword);
 		DisplayPasswordCheckBox->Show (enablePassword);
+		
+		
+		EnablePimEntry = enablePassword && (!enableConfirmation || (enablePkcs5Prf && !isMountPassword));
+		PimCheckBox->Show (EnablePimEntry);
+		VolumePimStaticText->Show (false);
+		VolumePimTextCtrl->Show (false);
+		VolumePimHelpStaticText->Show (false);
+
+		SetPimValidator ();
 
 		ConfirmPasswordStaticText->Show (enableConfirmation);
 		ConfirmPasswordTextCtrl->Show (enableConfirmation);
@@ -62,16 +75,56 @@
 		KeyfilesButton->Show (enableKeyfiles);
 
 		Pkcs5PrfStaticText->Show (enablePkcs5Prf);
-		Pkcs5PrfChoice->Show (enablePkcs5Prf);
+		Pkcs5PrfChoice->Show (enablePkcs5Prf);		
+		TrueCryptModeCheckBox->Show (!disableTruecryptMode);
+		HeaderWipeCountText->Show (enablePkcs5Prf && !isMountPassword);
+		HeaderWipeCount->Show (enablePkcs5Prf && !isMountPassword);
+
+		if (options && !disableTruecryptMode)
+		{
+			TrueCryptModeCheckBox->SetValue (options->TrueCryptMode);
+			if (options->TrueCryptMode)
+			{
+				PimCheckBox->Enable (false);
+				VolumePimStaticText->Enable (false);
+				VolumePimTextCtrl->Enable (false);
+				VolumePimHelpStaticText->Enable (false);
+			}
+		}
+
+		if (EnablePimEntry && options && options->Pim > 0)
+		{
+			PimCheckBox->SetValue (true);
+			PimCheckBox->Show (false);
+			VolumePimStaticText->Show (true);
+			VolumePimTextCtrl->Show (true);
+			VolumePimHelpStaticText->Show (true);
+			SetVolumePim (options->Pim);
+		}
 
 		if (enablePkcs5Prf)
 		{	
-			foreach_ref (const Pkcs5Kdf &kdf, Pkcs5Kdf::GetAvailableAlgorithms())
+			int index, prfInitialIndex = 0;
+			if (isMountPassword)
 			{
-				if (!kdf.IsDeprecated())
-					Pkcs5PrfChoice->Append (kdf.GetName());
+				// case of password for mounting
+				Pkcs5PrfChoice->Delete (0);
+				Pkcs5PrfChoice->Append (LangString["AUTODETECTION"]);		
 			}
-			Pkcs5PrfChoice->Select (0);
+			foreach_ref (const Pkcs5Kdf &kdf, Pkcs5Kdf::GetAvailableAlgorithms(false))
+			{
+				if (!kdf.IsDeprecated() || isMountPassword)
+				{
+					index = Pkcs5PrfChoice->Append (kdf.GetName());
+					if (isMountPassword && options && options->Kdf 
+						&& (options->Kdf->GetName() == kdf.GetName())
+					   )
+					{
+						prfInitialIndex = index;
+					}
+				}
+			}
+			Pkcs5PrfChoice->Select (prfInitialIndex);
 		}
 
 		if (!enablePkcs5Prf || (!enablePassword && !enableKeyfiles))
@@ -130,17 +183,27 @@
 		UseKeyfilesCheckBox->SetValue (true);
 	}
 
+	void VolumePasswordPanel::SetPimValidator ()
+	{
+		wxTextValidator validator (wxFILTER_INCLUDE_CHAR_LIST);  // wxFILTER_NUMERIC does not exclude - . , etc.
+		const wxChar *valArr[] = { L"0", L"1", L"2", L"3", L"4", L"5", L"6", L"7", L"8", L"9" };
+		validator.SetIncludes (wxArrayString (array_capacity (valArr), (const wxChar **) &valArr));
+		VolumePimTextCtrl->SetValidator (validator);
+	}
+
 	void VolumePasswordPanel::DisplayPassword (bool display, wxTextCtrl **textCtrl, int row)
 	{
 		FreezeScope freeze (this);
+		bool isPim = (*textCtrl == VolumePimTextCtrl);
+		int colspan = isPim? 1 : 2;
 
 		wxTextCtrl *newTextCtrl = new wxTextCtrl (this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, display ? 0 : wxTE_PASSWORD);
-		newTextCtrl->SetMaxLength (VolumePassword::MaxSize); 
+		newTextCtrl->SetMaxLength (isPim? 10 : VolumePassword::MaxSize); 
 		newTextCtrl->SetValue ((*textCtrl)->GetValue());
 		newTextCtrl->SetMinSize ((*textCtrl)->GetSize());
 
 		GridBagSizer->Detach ((*textCtrl));
-		GridBagSizer->Add (newTextCtrl, wxGBPosition (row, 1), wxGBSpan (1, 2), wxEXPAND|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 5);
+		GridBagSizer->Add (newTextCtrl, wxGBPosition (row, 1), wxGBSpan (1, colspan), wxEXPAND|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 5);
 		(*textCtrl)->Show (false);
 		WipeTextCtrl (*textCtrl);
 
@@ -148,8 +211,11 @@
 		Layout();
 		newTextCtrl->SetMinSize ((*textCtrl)->GetMinSize());
 
-		newTextCtrl->Connect (wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler (VolumePasswordPanel::OnTextChanged), nullptr, this);
+		newTextCtrl->Connect (wxEVT_COMMAND_TEXT_UPDATED, isPim? wxCommandEventHandler (VolumePasswordPanel::OnPimChanged): wxCommandEventHandler (VolumePasswordPanel::OnTextChanged), nullptr, this);
+		delete *textCtrl;
 		*textCtrl = newTextCtrl;
+		if (isPim)
+			SetPimValidator ();
 	}
 
 	shared_ptr <VolumePassword> VolumePasswordPanel::GetPassword () const
@@ -165,7 +231,7 @@
 
 #ifdef TC_WINDOWS
 		int len = GetWindowText (static_cast <HWND> (textCtrl->GetHandle()), passwordBuf, VolumePassword::MaxSize + 1);
-		password.reset (new VolumePassword (passwordBuf, len));
+		password = ToUTF8Password (passwordBuf, len);
 #else
 		wxString passwordStr (textCtrl->GetValue());	// A copy of the password is created here by wxWidgets, which cannot be erased
 		for (size_t i = 0; i < passwordStr.size() && i < VolumePassword::MaxSize; ++i)
@@ -173,22 +239,88 @@
 			passwordBuf[i] = (wchar_t) passwordStr[i];
 			passwordStr[i] = L'X';
 		}
-		password.reset (new VolumePassword (passwordBuf, passwordStr.size() <= VolumePassword::MaxSize ? passwordStr.size() : VolumePassword::MaxSize));
+		password = ToUTF8Password (passwordBuf, passwordStr.size() <= VolumePassword::MaxSize ? passwordStr.size() : VolumePassword::MaxSize);
 #endif
 		return password;
 	}
 
-	shared_ptr <Pkcs5Kdf> VolumePasswordPanel::GetPkcs5Kdf () const
+	shared_ptr <Pkcs5Kdf> VolumePasswordPanel::GetPkcs5Kdf (bool &bUnsupportedKdf) const
 	{
+		return GetPkcs5Kdf (GetTrueCryptMode(), bUnsupportedKdf);
+	}
+
+	shared_ptr <Pkcs5Kdf> VolumePasswordPanel::GetPkcs5Kdf (bool bTrueCryptMode, bool &bUnsupportedKdf) const
+	{
+		bUnsupportedKdf = false;
 		try
 		{
-			return Pkcs5Kdf::GetAlgorithm (wstring (Pkcs5PrfChoice->GetStringSelection()));
+			int index = Pkcs5PrfChoice->GetSelection ();
+			if ((wxNOT_FOUND == index) || (0 == index))
+			{
+				// auto-detection
+				return shared_ptr <Pkcs5Kdf> ();
+			}
+			else
+				return Pkcs5Kdf::GetAlgorithm (wstring (Pkcs5PrfChoice->GetStringSelection()), bTrueCryptMode);
 		}
 		catch (ParameterIncorrect&)
 		{
+			bUnsupportedKdf = true;
 			return shared_ptr <Pkcs5Kdf> ();
 		}
 	}
+	
+	int VolumePasswordPanel::GetVolumePim () const
+	{
+		if (VolumePimTextCtrl->IsEnabled () && VolumePimTextCtrl->IsShown ())
+		{
+			wxString pimStr (VolumePimTextCtrl->GetValue());
+			long pim = 0;
+			if (pimStr.IsEmpty())
+				return 0;
+			if (((size_t) wxNOT_FOUND == pimStr.find_first_not_of (wxT("0123456789"))) 
+				&& pimStr.ToLong (&pim))
+				return (int) pim;
+			else
+				return -1;
+		}
+		else
+			return 0;
+	}	
+
+	void VolumePasswordPanel::SetVolumePim (int pim)
+	{
+		if (pim > 0)
+		{
+			VolumePimTextCtrl->SetValue (StringConverter::FromNumber (pim));
+		}
+		else
+		{
+			VolumePimTextCtrl->SetValue (wxT(""));
+		}
+	}
+
+	bool VolumePasswordPanel::GetTrueCryptMode () const
+	{
+		return TrueCryptModeCheckBox->GetValue ();
+	}
+	
+	int VolumePasswordPanel::GetHeaderWipeCount () const
+	{
+		try
+		{
+			long wipeCount;
+			wxString wipeCountStrDesc = HeaderWipeCount->GetStringSelection();
+			wxString wipeCountStr = wipeCountStrDesc.BeforeFirst(wxT('-'));
+			if (!wipeCountStr.ToLong(&wipeCount))
+				wipeCount = PRAND_HEADER_WIPE_PASSES;
+			return (int) wipeCount;
+		}
+		catch (ParameterIncorrect&)
+		{
+			return PRAND_HEADER_WIPE_PASSES;
+		}
+	}
 
 	void VolumePasswordPanel::OnAddKeyfileDirMenuItemSelected (wxCommandEvent& event)
 	{
@@ -262,6 +394,9 @@
 		
 		if (ConfirmPasswordTextCtrl->IsShown())
 			DisplayPassword (event.IsChecked(), &ConfirmPasswordTextCtrl, 2);
+		
+		if (VolumePimTextCtrl->IsShown())
+			DisplayPassword (event.IsChecked(), &VolumePimTextCtrl, 3);
 
 		OnUpdate();
 	}
@@ -299,7 +434,14 @@
 	bool VolumePasswordPanel::PasswordsMatch () const
 	{
 		assert (ConfirmPasswordStaticText->IsShown());
-		return *GetPassword (PasswordTextCtrl) == *GetPassword (ConfirmPasswordTextCtrl);
+		try
+		{
+			return *GetPassword (PasswordTextCtrl) == *GetPassword (ConfirmPasswordTextCtrl);
+		}
+		catch (PasswordException&)
+		{
+			return false;
+		}
 	}
 
 	void VolumePasswordPanel::WipeTextCtrl (wxTextCtrl *textCtrl)
@@ -307,4 +449,61 @@
 		textCtrl->SetValue (wxString (L'X', textCtrl->GetLineLength(0)));
 		GetPassword (textCtrl);
 	}
+
+	bool VolumePasswordPanel::UpdatePimHelpText (bool pimChanged)
+	{
+		bool guiUpdated = false;
+		if (pimChanged && VolumePimHelpStaticText->GetForegroundColour() != *wxRED)
+		{
+			VolumePimHelpStaticText->SetForegroundColour(*wxRED);
+			VolumePimHelpStaticText->SetLabel(LangString["PIM_CHANGE_WARNING"]);
+			guiUpdated = true;
+		}
+		if (!pimChanged && VolumePimHelpStaticText->GetForegroundColour() != *wxBLACK)
+		{
+			VolumePimHelpStaticText->SetForegroundColour(*wxBLACK);
+			VolumePimHelpStaticText->SetLabel(LangString["IDC_PIM_HELP"]);
+			guiUpdated = true;
+		}
+		
+		if (guiUpdated)
+		{
+			Layout();
+			Fit();
+			GetParent()->Layout();
+			GetParent()->Fit();
+		}
+		return guiUpdated;
+	}
+
+	void VolumePasswordPanel::OnUsePimCheckBoxClick( wxCommandEvent& event )
+	{
+		if (EnablePimEntry)
+		{
+			PimCheckBox->Show (false);
+			VolumePimStaticText->Show (true);
+			VolumePimTextCtrl->Show (true);
+			VolumePimHelpStaticText->Show (true);	
+			
+			if (DisplayPasswordCheckBox->IsChecked ())
+				DisplayPassword (true, &VolumePimTextCtrl, 3);
+			else
+			{
+				Layout();
+				Fit();
+			}
+			
+			GetParent()->Layout();
+			GetParent()->Fit();
+		}
+	}
+	
+	void VolumePasswordPanel::OnTrueCryptModeChecked( wxCommandEvent& event )
+	{
+		bool bEnablePIM = !GetTrueCryptMode ();
+		PimCheckBox->Enable (bEnablePIM);
+		VolumePimStaticText->Enable (bEnablePIM);
+		VolumePimTextCtrl->Enable (bEnablePIM);
+		VolumePimHelpStaticText->Enable (bEnablePIM);
+	}
 }
