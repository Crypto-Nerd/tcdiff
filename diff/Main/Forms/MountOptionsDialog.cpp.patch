--- ./Main/Forms/MountOptionsDialog.cpp	2012-02-07 14:36:48.000000000 +0400
+++ ../veracrypt_1.17_Source/src/Main/Forms/MountOptionsDialog.cpp	2016-02-14 12:11:21.000000000 +0300
@@ -1,9 +1,13 @@
 /*
- Copyright (c) 2008 TrueCrypt Developers Association. All rights reserved.
-
- Governed by the TrueCrypt License 3.0 the full text of which is contained in
- the file License.txt included in TrueCrypt binary and source code distribution
- packages.
+ Derived from source code of TrueCrypt 7.1a, which is
+ Copyright (c) 2008-2012 TrueCrypt Developers Association and which is governed
+ by the TrueCrypt License 3.0.
+
+ Modifications and additions to the original source code (contained in this file) 
+ and all other portions of this file are Copyright (c) 2013-2016 IDRIX
+ and are governed by the Apache License 2.0 the full text of which is
+ contained in the file License.txt included in VeraCrypt binary and source
+ code distribution packages.
 */
 
 #include "System.h"
@@ -11,7 +15,7 @@
 #include "Main/GraphicUserInterface.h"
 #include "MountOptionsDialog.h"
 
-namespace TrueCrypt
+namespace VeraCrypt
 {
 	MountOptionsDialog::MountOptionsDialog (wxWindow *parent, MountOptions &options, const wxString &title, bool disableMountOptions)
 		: MountOptionsDialogBase (parent, wxID_ANY, wxString()
@@ -30,7 +34,7 @@
 		if (disableMountOptions)
 			OptionsButton->Show (false);
 
-		PasswordPanel = new VolumePasswordPanel (this, options.Password, options.Keyfiles, !disableMountOptions);
+		PasswordPanel = new VolumePasswordPanel (this, &options, options.Password, disableMountOptions, options.Keyfiles, !disableMountOptions, true, true, false, true, true);
 		PasswordPanel->SetCacheCheckBoxValidator (wxGenericValidator (&Options.CachePassword));
 
 		PasswordSizer->Add (PasswordPanel, 1, wxALL | wxEXPAND);
@@ -61,7 +65,7 @@
 		OptionsButton->SetLabel (OptionsButtonLabel + L" >");
 		OptionsPanel->Show (false);
 
-		ProtectionPasswordPanel = new VolumePasswordPanel (OptionsPanel, options.ProtectionPassword, options.ProtectionKeyfiles, false, true, true, false, false, _("P&assword to hidden volume:"));
+		ProtectionPasswordPanel = new VolumePasswordPanel (OptionsPanel, &options, options.ProtectionPassword, true, options.ProtectionKeyfiles, false, true, true, false, true, true, _("P&assword to hidden volume:"));
 		ProtectionPasswordSizer->Add (ProtectionPasswordPanel, 1, wxALL | wxEXPAND);
 
 		UpdateDialog();
@@ -81,10 +85,46 @@
 	}
 
 	void MountOptionsDialog::OnOKButtonClick (wxCommandEvent& event)
-	{
+	{	
+		bool bUnsupportedKdf = false;
+		
+		/* verify that PIM values are valid before continuing*/
+		int Pim = PasswordPanel->GetVolumePim();
+		int ProtectionPim = (!ReadOnlyCheckBox->IsChecked() && ProtectionCheckBox->IsChecked())?
+			ProtectionPasswordPanel->GetVolumePim() : 0;
+			
+		/* invalid PIM: set focus to PIM field and stop processing */
+		if (-1 == Pim)
+		{
+			PasswordPanel->SetFocusToPimTextCtrl();
+			return;
+		}
+		
+		if (-1 == ProtectionPim)
+		{
+			ProtectionPasswordPanel->SetFocusToPimTextCtrl();
+			return;
+		}
+
 		TransferDataFromWindow();
 
-		Options.Password = PasswordPanel->GetPassword();
+		try
+		{
+			Options.Password = PasswordPanel->GetPassword();
+		}
+		catch (PasswordException& e)
+		{
+			Gui->ShowWarning (e);
+			return;
+		}
+		Options.Pim = Pim;
+		Options.Kdf = PasswordPanel->GetPkcs5Kdf(bUnsupportedKdf);
+		if (bUnsupportedKdf)
+		{
+			Gui->ShowWarning (LangString ["ALGO_NOT_SUPPORTED_FOR_TRUECRYPT_MODE"]);
+			return;
+		}
+		Options.TrueCryptMode = PasswordPanel->GetTrueCryptMode();
 		Options.Keyfiles = PasswordPanel->GetKeyfiles();
 
 		if (ReadOnlyCheckBox->IsChecked())
@@ -93,8 +133,23 @@
 		}
 		else if (ProtectionCheckBox->IsChecked())
 		{
-			Options.Protection = VolumeProtection::HiddenVolumeReadOnly;
-			Options.ProtectionPassword = ProtectionPasswordPanel->GetPassword();
+			try
+			{
+				Options.ProtectionPassword = ProtectionPasswordPanel->GetPassword();
+			}
+			catch (PasswordException& e)
+			{
+				Gui->ShowWarning (e);
+				return;
+			}
+			Options.Protection = VolumeProtection::HiddenVolumeReadOnly;			
+			Options.ProtectionPim = ProtectionPim;
+			Options.ProtectionKdf = ProtectionPasswordPanel->GetPkcs5Kdf(Options.TrueCryptMode, bUnsupportedKdf);
+			if (bUnsupportedKdf)
+			{
+				Gui->ShowWarning (LangString ["ALGO_NOT_SUPPORTED_FOR_TRUECRYPT_MODE"]);
+				return;
+			}
 			Options.ProtectionKeyfiles = ProtectionPasswordPanel->GetKeyfiles();
 		}
 		else
@@ -108,16 +163,6 @@
 
 		Options.FilesystemOptions = FilesystemOptionsTextCtrl->GetValue();
 
-		try
-		{
-			if (Options.Password)
-				Options.Password->CheckPortability();
-		}
-		catch (UnportablePassword &)
-		{
-			Gui->ShowWarning (LangString ["UNSUPPORTED_CHARS_IN_PWD_RECOM"]);
-		}
-
 		EndModal (wxID_OK);
 	}
 
@@ -170,5 +215,6 @@
 
 		Fit();
 		Layout();
+		MainSizer->Fit( this );
 	}
 }
