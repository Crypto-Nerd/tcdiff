--- ./Main/CommandLineInterface.cpp	2012-02-07 14:36:48.000000000 +0400
+++ ../veracrypt_1.17_Source/src/Main/CommandLineInterface.cpp	2016-02-14 12:11:21.000000000 +0300
@@ -1,9 +1,13 @@
 /*
- Copyright (c) 2008-2010 TrueCrypt Developers Association. All rights reserved.
-
- Governed by the TrueCrypt License 3.0 the full text of which is contained in
- the file License.txt included in TrueCrypt binary and source code distribution
- packages.
+ Derived from source code of TrueCrypt 7.1a, which is
+ Copyright (c) 2008-2012 TrueCrypt Developers Association and which is governed
+ by the TrueCrypt License 3.0.
+
+ Modifications and additions to the original source code (contained in this file) 
+ and all other portions of this file are Copyright (c) 2013-2016 IDRIX
+ and are governed by the Apache License 2.0 the full text of which is
+ contained in the file License.txt included in VeraCrypt binary and source
+ code distribution packages.
 */
 
 #include "System.h"
@@ -15,16 +19,22 @@
 #include "LanguageStrings.h"
 #include "UserInterfaceException.h"
 
-namespace TrueCrypt
+namespace VeraCrypt
 {
-	CommandLineInterface::CommandLineInterface (wxCmdLineParser &parser, UserInterfaceType::Enum interfaceType) :
+	CommandLineInterface::CommandLineInterface (int argc, wchar_t** argv, UserInterfaceType::Enum interfaceType) :
 		ArgCommand (CommandId::None),
 		ArgFilesystem (VolumeCreationOptions::FilesystemType::Unknown),
+		ArgNewPim (-1),
 		ArgNoHiddenVolumeProtection (false),
+		ArgPim (-1),
 		ArgSize (0),
 		ArgVolumeType (VolumeType::Unknown),
+		ArgTrueCryptMode (false),
 		StartBackgroundTask (false)
 	{
+		wxCmdLineParser parser;
+		parser.SetCmdLine (argc, argv);
+
 		parser.SetSwitchChars (L"-");
 
 		parser.AddOption (L"",  L"auto-mount",			_("Auto mount device-hosted/favorite volumes"));
@@ -55,20 +65,27 @@
 		parser.AddSwitch (L"",	L"list-token-keyfiles",	_("List security token keyfiles"));
 		parser.AddSwitch (L"",	L"load-preferences",	_("Load user preferences"));
 		parser.AddSwitch (L"",	L"mount",				_("Mount volume interactively"));
-		parser.AddOption (L"m", L"mount-options",		_("TrueCrypt volume mount options"));
+		parser.AddOption (L"m", L"mount-options",		_("VeraCrypt volume mount options"));
+		parser.AddOption (L"",	L"new-hash",			_("New hash algorithm"));
 		parser.AddOption (L"",	L"new-keyfiles",		_("New keyfiles"));
 		parser.AddOption (L"",	L"new-password",		_("New password"));
+		parser.AddOption (L"",	L"new-pim",				_("New PIM"));
 		parser.AddSwitch (L"",	L"non-interactive",		_("Do not interact with user"));
+		parser.AddSwitch (L"",  L"stdin",				_("Read password from standard input"));
 		parser.AddOption (L"p", L"password",			_("Password"));
+		parser.AddOption (L"",  L"pim",					_("PIM"));
 		parser.AddOption (L"",	L"protect-hidden",		_("Protect hidden volume"));
+		parser.AddOption (L"",	L"protection-hash",		_("Hash algorithm for protected hidden volume"));
 		parser.AddOption (L"",	L"protection-keyfiles",	_("Keyfiles for protected hidden volume"));
 		parser.AddOption (L"",	L"protection-password",	_("Password for protected hidden volume"));
+		parser.AddOption (L"",	L"protection-pim",		_("PIM for protected hidden volume"));
 		parser.AddOption (L"",	L"random-source",		_("Use file as source of random data"));
 		parser.AddSwitch (L"",  L"restore-headers",		_("Restore volume headers"));
 		parser.AddSwitch (L"",	L"save-preferences",	_("Save user preferences"));
 		parser.AddSwitch (L"",	L"quick",				_("Enable quick format"));
 		parser.AddOption (L"",	L"size",				_("Size in bytes"));
 		parser.AddOption (L"",	L"slot",				_("Volume slot number"));
+		parser.AddSwitch (L"tc",L"truecrypt",			_("Enable TrueCrypt mode. Should be put first to avoid issues."));
 		parser.AddSwitch (L"",	L"test",				_("Test internal algorithms"));
 		parser.AddSwitch (L"t", L"text",				_("Use text user interface"));
 		parser.AddOption (L"",	L"token-lib",			_("Security token library"));
@@ -280,12 +297,39 @@
 				
 				if (str.IsSameAs (L"FAT", false))
 					ArgFilesystem = VolumeCreationOptions::FilesystemType::FAT;
+#ifdef TC_LINUX
+				else if (str.IsSameAs (L"Ext2", false))
+					ArgFilesystem = VolumeCreationOptions::FilesystemType::Ext2;
+				else if (str.IsSameAs (L"Ext3", false))
+					ArgFilesystem = VolumeCreationOptions::FilesystemType::Ext3;
+				else if (str.IsSameAs (L"Ext4", false))
+					ArgFilesystem = VolumeCreationOptions::FilesystemType::Ext4;
+				else if (str.IsSameAs (L"NTFS", false))
+					ArgFilesystem = VolumeCreationOptions::FilesystemType::NTFS;
+				else if (str.IsSameAs (L"exFAT", false))
+					ArgFilesystem = VolumeCreationOptions::FilesystemType::exFAT;
+#elif defined (TC_MACOSX)
+				else if (	str.IsSameAs (L"HFS", false) 
+						|| 	str.IsSameAs (L"HFS+", false)
+						||	str.IsSameAs (L"MacOsExt", false)
+						)
+				{
+					ArgFilesystem = VolumeCreationOptions::FilesystemType::MacOsExt;
+				}
+				else if (str.IsSameAs (L"exFAT", false))
+					ArgFilesystem = VolumeCreationOptions::FilesystemType::exFAT;
+#elif defined (TC_FREEBSD) || defined (TC_SOLARIS)
+				else if (str.IsSameAs (L"UFS", false))
+					ArgFilesystem = VolumeCreationOptions::FilesystemType::UFS;
+#endif
 				else
 					ArgFilesystem = VolumeCreationOptions::FilesystemType::None;
 			}
 		}
 
 		ArgForce = parser.Found (L"force");
+		
+		ArgTrueCryptMode = parser.Found (L"truecrypt");
 
 #if !defined(TC_WINDOWS) && !defined(TC_MACOSX)
 		if (parser.Found (L"fs-options", &str))
@@ -298,7 +342,9 @@
 
 			foreach (shared_ptr <Hash> hash, Hash::GetAvailableAlgorithms())
 			{
-				if (wxString (hash->GetName()).IsSameAs (str, false))
+				wxString hashName (hash->GetName());
+				wxString hashAltName (hash->GetAltName());
+				if (hashName.IsSameAs (str, false) || hashAltName.IsSameAs (str, false))
 					ArgHash = hash;
 			}
 
@@ -306,6 +352,22 @@
 				throw_err (LangString["UNKNOWN_OPTION"] + L": " + str);
 		}
 
+		if (parser.Found (L"new-hash", &str))
+		{
+			ArgNewHash.reset();
+
+			foreach (shared_ptr <Hash> hash, Hash::GetAvailableAlgorithms())
+			{
+				wxString hashName (hash->GetName());
+				wxString hashAltName (hash->GetAltName());
+				if (hashName.IsSameAs (str, false) || hashAltName.IsSameAs (str, false))
+					ArgNewHash = hash;
+			}
+
+			if (!ArgNewHash)
+				throw_err (LangString["UNKNOWN_OPTION"] + L": " + str);
+		}
+
 		if (parser.Found (L"keyfiles", &str))
 			ArgKeyfiles = ToKeyfileList (str);
 
@@ -339,7 +401,24 @@
 			ArgNewKeyfiles = ToKeyfileList (str);
 
 		if (parser.Found (L"new-password", &str))
-			ArgNewPassword.reset (new VolumePassword (wstring (str)));
+			ArgNewPassword = ToUTF8Password (str);
+		
+		if (parser.Found (L"new-pim", &str))
+		{
+			try
+			{
+				ArgNewPim = StringConverter::ToInt32 (wstring (str));
+			}
+			catch (...)
+			{
+				throw_err (LangString["PARAMETER_INCORRECT"] + L": " + str);
+			}
+
+			if (ArgNewPim < 0)
+				throw_err (LangString["PARAMETER_INCORRECT"] + L": " + str);
+			else if (ArgNewPim > 0 && ArgTrueCryptMode)
+				throw_err (LangString["PIM_NOT_SUPPORTED_FOR_TRUECRYPT_MODE"]);
+		}
 		
 		if (parser.Found (L"non-interactive"))
 		{
@@ -349,8 +428,37 @@
 			Preferences.NonInteractive = true;
 		}
 
+		if (parser.Found (L"stdin"))
+		{
+			if (!Preferences.NonInteractive)
+				throw_err (L"--stdin is supported only in non-interactive mode");
+
+			Preferences.UseStandardInput = true;
+		}
+
 		if (parser.Found (L"password", &str))
-			ArgPassword.reset (new VolumePassword (wstring (str)));
+		{
+			if (Preferences.UseStandardInput)
+				throw_err (L"--password cannot be used with --stdin");
+			ArgPassword = ToUTF8Password (str);
+		}
+
+		if (parser.Found (L"pim", &str))
+		{
+			try
+			{
+				ArgPim = StringConverter::ToInt32 (wstring (str));
+			}
+			catch (...)
+			{
+				throw_err (LangString["PARAMETER_INCORRECT"] + L": " + str);
+			}
+
+			if (ArgPim < 0)
+				throw_err (LangString["PARAMETER_INCORRECT"] + L": " + str);
+			else if (ArgPim > 0 && ArgTrueCryptMode)
+				throw_err (LangString["PIM_NOT_SUPPORTED_FOR_TRUECRYPT_MODE"]);
+		}
 
 		if (parser.Found (L"protect-hidden", &str))
 		{
@@ -373,14 +481,49 @@
 		
 		if (parser.Found (L"protection-password", &str))
 		{
-			ArgMountOptions.ProtectionPassword.reset (new VolumePassword (wstring (str)));
+			ArgMountOptions.ProtectionPassword = ToUTF8Password (str);
+			ArgMountOptions.Protection = VolumeProtection::HiddenVolumeReadOnly;
+		}
+		
+		if (parser.Found (L"protection-pim", &str))
+		{
+			int pim = -1;
+			try
+			{
+				pim = StringConverter::ToInt32 (wstring (str));
+				if (pim < 0)
+					throw_err (LangString["PARAMETER_INCORRECT"] + L": " + str);
+			}
+			catch (...)
+			{
+				throw_err (LangString["PARAMETER_INCORRECT"] + L": " + str);
+			}
+			ArgMountOptions.ProtectionPim = pim;
 			ArgMountOptions.Protection = VolumeProtection::HiddenVolumeReadOnly;
 		}
 
+		if (parser.Found (L"protection-hash", &str))
+		{
+			bool bHashFound = false;
+			foreach (shared_ptr <Hash> hash, Hash::GetAvailableAlgorithms())
+			{
+				wxString hashName (hash->GetName());
+				wxString hashAltName (hash->GetAltName());
+				if (hashName.IsSameAs (str, false) || hashAltName.IsSameAs (str, false))
+				{
+					bHashFound = true;
+					ArgMountOptions.ProtectionKdf = Pkcs5Kdf::GetAlgorithm (*hash, ArgTrueCryptMode);
+				}
+			}
+
+			if (!bHashFound)
+				throw_err (LangString["UNKNOWN_OPTION"] + L": " + str);
+		}
+
 		ArgQuick = parser.Found (L"quick");
 
 		if (parser.Found (L"random-source", &str))
-			ArgRandomSourcePath = FilesystemPath (str);
+			ArgRandomSourcePath = FilesystemPath (str.wc_str());
 
 		if (parser.Found (L"restore-headers"))
 		{
@@ -410,9 +553,36 @@
 
 		if (parser.Found (L"size", &str))
 		{
+			uint64 multiplier;
+			wxChar lastChar = str [str.Length () - 1];
+			if (lastChar >= wxT('0') && lastChar <= wxT('9'))
+				multiplier = 1;
+			else if (lastChar == wxT('K') || lastChar == wxT('k'))
+				multiplier = BYTES_PER_KB;
+			else if (lastChar == wxT('M') || lastChar == wxT('m'))
+				multiplier = BYTES_PER_MB;
+			else if (lastChar == wxT('G') || lastChar == wxT('g'))
+				multiplier = BYTES_PER_GB;
+			else if (lastChar == wxT('T') || lastChar == wxT('t'))
+				multiplier = BYTES_PER_TB;
+			else
+				throw_err (LangString["PARAMETER_INCORRECT"] + L": " + str);
+
+			// remove suffix if present
+			if (multiplier != 1)
+				str.RemoveLast ();
+			// check that we only have digits in the string
+			size_t index = str.find_first_not_of (wxT("0123456789"));
+			if (index != (size_t) wxNOT_FOUND)
+			{
+				// restore last characater for error display
+				if (multiplier != 1)
+					str += lastChar;
+				throw_err (LangString["PARAMETER_INCORRECT"] + L": " + str);
+			}
 			try
 			{
-				ArgSize = StringConverter::ToUInt64 (wstring (str));
+				ArgSize = multiplier * StringConverter::ToUInt64 (wstring (str));
 			}
 			catch (...)
 			{
@@ -439,6 +609,22 @@
 		// Parameters
 		if (parser.GetParamCount() > 0)
 		{
+			// in case of GUI interface, we load the preference when only 
+			// specifying volume path without any option/switch
+			if (Application::GetUserInterfaceType() != UserInterfaceType::Text)
+			{
+				// check if only parameters were specified in the command line
+				// (e.g. when associating .hc extension in mimetype with /usr/bin/veracrypt)
+				bool onlyParametersPresent = (parser.GetParamCount() == (size_t) (argc - 1));
+
+				if (onlyParametersPresent)
+				{
+					// no options/switches, so we load prefences now
+					Preferences.Load();
+					ArgMountOptions = Preferences.DefaultMountOptions;
+				}
+			}
+
 			if (ArgCommand == CommandId::None)
 			{
 				ArgCommand = CommandId::MountVolume;
@@ -471,7 +657,7 @@
 
 			if (param1IsFile)
 			{
-				ArgFilePath.reset (new FilePath (parser.GetParam (0)));
+				ArgFilePath.reset (new FilePath (parser.GetParam (0).wc_str()));
 			}
 		}
 
@@ -524,7 +710,7 @@
 					arr.Add (L"");
 					continue;
 				}
-				arr.Last() += token.empty() ? L',' : token;
+				arr.Last() += token.empty() ? L"," : token.wc_str();
 			}
 			else
 				arr.Add (token);
@@ -562,12 +748,12 @@
 			{
 				filteredVolumes.push_back (volume);
 			}
-			else if (wxString (volume->Path) == pathFilter.GetFullPath())
+			else if (wxString (wstring(volume->Path)) == pathFilter.GetFullPath())
 			{
 				filteredVolumes.push_back (volume);
 			}
-			else if (wxString (volume->MountPoint) == pathFilter.GetFullPath()
-				|| (wxString (volume->MountPoint) + wxFileName::GetPathSeparator()) == pathFilter.GetFullPath())
+			else if (wxString (wstring(volume->MountPoint)) == pathFilter.GetFullPath()
+				|| (wxString (wstring(volume->MountPoint)) + wxFileName::GetPathSeparator()) == pathFilter.GetFullPath())
 			{
 				filteredVolumes.push_back (volume);
 			}
@@ -579,5 +765,41 @@
 		return filteredVolumes;
 	}
 
+	shared_ptr<VolumePassword> ToUTF8Password (const wchar_t* str, size_t charCount)
+	{
+		if (charCount > 0)
+		{
+			shared_ptr<SecureBuffer> utf8Buffer = ToUTF8Buffer (str, charCount);
+			return shared_ptr<VolumePassword>(new VolumePassword (*utf8Buffer));
+		}
+		else
+			return shared_ptr<VolumePassword>(new VolumePassword ());
+	}
+
+	shared_ptr<SecureBuffer> ToUTF8Buffer (const wchar_t* str, size_t charCount)
+	{
+		if (charCount == (size_t) -1)
+			charCount = wcslen (str);
+
+		if (charCount > 0)
+		{
+			wxMBConvUTF8 utf8;
+			size_t ulen = utf8.FromWChar (NULL, 0, str, charCount);
+			if (wxCONV_FAILED == ulen)
+				throw PasswordUTF8Invalid (SRC_POS);
+			SecureBuffer passwordBuf(ulen);
+			ulen = utf8.FromWChar ((char*) (byte*) passwordBuf, ulen, str, charCount);
+			if (wxCONV_FAILED == ulen)
+				throw PasswordUTF8Invalid (SRC_POS);
+			if (ulen > VolumePassword::MaxSize)
+				throw PasswordUTF8TooLong (SRC_POS);
+
+			ConstBufferPtr utf8Buffer ((byte*) passwordBuf, ulen);
+			return shared_ptr<SecureBuffer>(new SecureBuffer (utf8Buffer));
+		}
+		else
+			return shared_ptr<SecureBuffer>(new SecureBuffer ());
+	}
+
 	auto_ptr <CommandLineInterface> CmdLine;
 }
