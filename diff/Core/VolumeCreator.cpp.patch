--- ./Core/VolumeCreator.cpp	2012-02-07 14:36:48.000000000 +0400
+++ ../veracrypt_1.17_Source/src/Core/VolumeCreator.cpp	2016-02-14 12:11:21.000000000 +0300
@@ -1,9 +1,13 @@
 /*
- Copyright (c) 2008-2010 TrueCrypt Developers Association. All rights reserved.
-
- Governed by the TrueCrypt License 3.0 the full text of which is contained in
- the file License.txt included in TrueCrypt binary and source code distribution
- packages.
+ Derived from source code of TrueCrypt 7.1a, which is
+ Copyright (c) 2008-2012 TrueCrypt Developers Association and which is governed
+ by the TrueCrypt License 3.0.
+
+ Modifications and additions to the original source code (contained in this file) 
+ and all other portions of this file are Copyright (c) 2013-2016 IDRIX
+ and are governed by the Apache License 2.0 the full text of which is
+ contained in the file License.txt included in VeraCrypt binary and source
+ code distribution packages.
 */
 
 #include "Volume/EncryptionTest.h"
@@ -19,7 +23,7 @@
 #include "VolumeCreator.h"
 #include "FatFormatter.h"
 
-namespace TrueCrypt
+namespace VeraCrypt
 {
 	VolumeCreator::VolumeCreator ()
 		: SizeDone (0)
@@ -136,7 +140,7 @@
 				SecureBuffer backupHeaderSalt (VolumeHeader::GetSaltSize());
 				RandomNumberGenerator::GetData (backupHeaderSalt);
 
-				Options->VolumeHeaderKdf->DeriveKey (HeaderKey, *PasswordKey, backupHeaderSalt);
+				Options->VolumeHeaderKdf->DeriveKey (HeaderKey, *PasswordKey, Options->Pim, backupHeaderSalt);
 
 				Layout->GetHeader()->EncryptNew (backupHeader, backupHeaderSalt, HeaderKey, Options->VolumeHeaderKdf);
 
@@ -213,7 +217,7 @@
 
 				if (options->SectorSize < TC_MIN_VOLUME_SECTOR_SIZE
 					|| options->SectorSize > TC_MAX_VOLUME_SECTOR_SIZE
-#if !defined (TC_LINUX)
+#if !defined (TC_LINUX) && !defined (TC_MACOSX)
 					|| options->SectorSize != TC_SECTOR_SIZE_LEGACY
 #endif
 					|| options->SectorSize % ENCRYPTION_DATA_UNIT_SIZE != 0)
@@ -276,7 +280,7 @@
 			// Header key
 			HeaderKey.Allocate (VolumeHeader::GetLargestSerializedKeySize());
 			PasswordKey = Keyfile::ApplyListToPassword (options->Keyfiles, options->Password);
-			options->VolumeHeaderKdf->DeriveKey (HeaderKey, *PasswordKey, salt);
+			options->VolumeHeaderKdf->DeriveKey (HeaderKey, *PasswordKey, options->Pim, salt);
 			headerOptions.HeaderKey = HeaderKey;
 
 			header->Create (headerBuffer, headerOptions);
