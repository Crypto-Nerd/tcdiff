--- ./Core/RandomNumberGenerator.cpp	2012-02-07 14:36:48.000000000 +0400
+++ ../veracrypt_1.17_Source/src/Core/RandomNumberGenerator.cpp	2016-02-14 12:11:21.000000000 +0300
@@ -1,9 +1,13 @@
 /*
- Copyright (c) 2008-2009 TrueCrypt Developers Association. All rights reserved.
-
- Governed by the TrueCrypt License 3.0 the full text of which is contained in
- the file License.txt included in TrueCrypt binary and source code distribution
- packages.
+ Derived from source code of TrueCrypt 7.1a, which is
+ Copyright (c) 2008-2012 TrueCrypt Developers Association and which is governed
+ by the TrueCrypt License 3.0.
+
+ Modifications and additions to the original source code (contained in this file) 
+ and all other portions of this file are Copyright (c) 2013-2016 IDRIX
+ and are governed by the Apache License 2.0 the full text of which is
+ contained in the file License.txt included in VeraCrypt binary and source
+ code distribution packages.
 */
 
 #ifndef TC_WINDOWS
@@ -15,7 +19,7 @@
 #include "RandomNumberGenerator.h"
 #include "Volume/Crc32.h"
 
-namespace TrueCrypt
+namespace VeraCrypt
 {
 	void RandomNumberGenerator::AddSystemDataToPool (bool fast)
 	{
@@ -65,45 +69,63 @@
 		}
 	}
 
-	void RandomNumberGenerator::GetData (const BufferPtr &buffer, bool fast)
+	void RandomNumberGenerator::GetData (const BufferPtr &buffer, bool fast, bool allowAnyLength)
 	{
 		if (!Running)
 			throw NotInitialized (SRC_POS);
 
-		if (buffer.Size() > PoolSize)
+		if (!allowAnyLength && (buffer.Size() > PoolSize))
 			throw ParameterIncorrect (SRC_POS);
 
 		ScopeLock lock (AccessMutex);
+		size_t bufferLen = buffer.Size(), loopLen;
+		byte* pbBuffer = buffer.Get();
 
 		// Poll system for data
 		AddSystemDataToPool (fast);
 		HashMixPool();
 
-		// Transfer bytes from pool to output buffer
-		for (size_t i = 0; i < buffer.Size(); ++i)
-		{
-			buffer[i] += Pool[ReadOffset++];
-
-			if (ReadOffset >= PoolSize)
-				ReadOffset = 0;
-		}
-
-		// Invert and mix the pool
-		for (size_t i = 0; i < Pool.Size(); ++i)
+		while (bufferLen > 0)
 		{
-			Pool[i] = ~Pool[i];
-		}
-
-		AddSystemDataToPool (true);
-		HashMixPool();
-
-		// XOR the current pool content into the output buffer to prevent pool state leaks
-		for (size_t i = 0; i < buffer.Size(); ++i)
-		{
-			buffer[i] ^= Pool[ReadOffset++];
-
-			if (ReadOffset >= PoolSize)
-				ReadOffset = 0;
+			if (bufferLen > PoolSize)
+			{
+				loopLen = PoolSize;
+				bufferLen -= PoolSize;
+			}
+			else
+			{
+				loopLen = bufferLen;
+				bufferLen = 0;
+			}
+
+			// Transfer bytes from pool to output buffer
+			for (size_t i = 0; i < loopLen; ++i)
+			{
+				pbBuffer[i] += Pool[ReadOffset++];
+
+				if (ReadOffset >= PoolSize)
+					ReadOffset = 0;
+			}
+
+			// Invert and mix the pool
+			for (size_t i = 0; i < Pool.Size(); ++i)
+			{
+				Pool[i] = ~Pool[i];
+			}
+
+			AddSystemDataToPool (true);
+			HashMixPool();
+
+			// XOR the current pool content into the output buffer to prevent pool state leaks
+			for (size_t i = 0; i < loopLen; ++i)
+			{
+				pbBuffer[i] ^= Pool[ReadOffset++];
+
+				if (ReadOffset >= PoolSize)
+					ReadOffset = 0;
+			}
+			
+			pbBuffer += loopLen;
 		}
 	}
 
