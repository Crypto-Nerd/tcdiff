--- ./Core/Unix/CoreUnix.cpp	2012-02-07 14:36:48.000000000 +0400
+++ ../veracrypt_1.17_Source/src/Core/Unix/CoreUnix.cpp	2016-02-14 12:11:21.000000000 +0300
@@ -1,9 +1,13 @@
 /*
- Copyright (c) 2008-2010 TrueCrypt Developers Association. All rights reserved.
-
- Governed by the TrueCrypt License 3.0 the full text of which is contained in
- the file License.txt included in TrueCrypt binary and source code distribution
- packages.
+ Derived from source code of TrueCrypt 7.1a, which is
+ Copyright (c) 2008-2012 TrueCrypt Developers Association and which is governed
+ by the TrueCrypt License 3.0.
+
+ Modifications and additions to the original source code (contained in this file) 
+ and all other portions of this file are Copyright (c) 2013-2016 IDRIX
+ and are governed by the Apache License 2.0 the full text of which is
+ contained in the file License.txt included in VeraCrypt binary and source
+ code distribution packages.
 */
 
 #include "CoreUnix.h"
@@ -18,7 +22,7 @@
 #include "Driver/Fuse/FuseService.h"
 #include "Volume/VolumePasswordCache.h"
 
-namespace TrueCrypt
+namespace VeraCrypt
 {
 	CoreUnix::CoreUnix ()
 	{
@@ -61,6 +65,31 @@
 		{
 			Process::Execute ("xterm", args, 1000);
 		} catch (TimeOut&) { }
+#ifdef TC_LINUX
+		catch (SystemException&)
+		{
+			// xterm not available. Try with KDE konsole if it exists
+			struct stat sb;
+			if (stat("/usr/bin/konsole", &sb) == 0)
+			{
+				args.clear ();
+				args.push_back ("--title");
+				args.push_back ("fsck");
+				args.push_back ("--caption");
+				args.push_back ("fsck");
+				args.push_back ("-e");				
+				args.push_back ("sh");				
+				args.push_back ("-c");				
+				args.push_back (xargs);
+				try
+				{
+					Process::Execute ("konsole", args, 1000);
+				} catch (TimeOut&) { }
+			}
+			else
+				throw;
+		}
+#endif
 	}
 
 	void CoreUnix::DismountFilesystem (const DirectoryPath &mountPoint, bool force) const
@@ -205,17 +234,17 @@
 
 	string CoreUnix::GetDefaultMountPointPrefix () const
 	{
-		const char *envPrefix = getenv ("TRUECRYPT_MOUNT_PREFIX");
+		const char *envPrefix = getenv ("VERACRYPT_MOUNT_PREFIX");
 		if (envPrefix && !string (envPrefix).empty())
 			return envPrefix;
 		
 		if (FilesystemPath ("/media").IsDirectory())
-			return "/media/truecrypt";
+			return "/media/veracrypt";
 		
 		if (FilesystemPath ("/mnt").IsDirectory())
-			return "/mnt/truecrypt";
+			return "/mnt/veracrypt";
 		
-		return GetTempDirectory() + "/truecrypt_mnt";
+		return GetTempDirectory() + "/veracrypt_mnt";
 	}
 
 	uint32 CoreUnix::GetDeviceSectorSize (const DevicePath &devicePath) const
@@ -409,9 +438,14 @@
 					options.Path,
 					options.PreserveTimestamps,
 					options.Password,
+					options.Pim,
+					options.Kdf,
+					options.TrueCryptMode,
 					options.Keyfiles,
 					options.Protection,
 					options.ProtectionPassword,
+					options.ProtectionPim,
+					options.ProtectionKdf,
 					options.ProtectionKeyfiles,
 					options.SharedAccessAllowed,
 					VolumeType::Unknown,
@@ -548,6 +582,23 @@
 					remove (mountPoint.c_str());
 				throw;
 			}
+
+#ifndef TC_MACOSX			
+			// set again correct ownership of the mount point to avoid any issues
+			if (!options.NoFilesystem && options.MountPoint)
+			{
+				mountPoint = *options.MountPoint;
+
+				if (mountPoint.find (GetDefaultMountPointPrefix()) == 0)
+				{
+					try
+					{
+						chown (mountPoint.c_str(), GetRealUserId(), GetRealGroupId());
+					} catch (...) { }
+				}
+			}
+#endif
+
 		}
 		catch (...)
 		{
