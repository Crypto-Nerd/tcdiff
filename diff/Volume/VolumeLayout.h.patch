--- ./Volume/VolumeLayout.h	2012-02-07 14:36:48.000000000 +0400
+++ ../veracrypt_1.17_Source/src/Volume/VolumeLayout.h	2016-02-14 12:11:21.000000000 +0300
@@ -1,9 +1,13 @@
 /*
- Copyright (c) 2008 TrueCrypt Developers Association. All rights reserved.
-
- Governed by the TrueCrypt License 3.0 the full text of which is contained in
- the file License.txt included in TrueCrypt binary and source code distribution
- packages.
+ Derived from source code of TrueCrypt 7.1a, which is
+ Copyright (c) 2008-2012 TrueCrypt Developers Association and which is governed
+ by the TrueCrypt License 3.0.
+
+ Modifications and additions to the original source code (contained in this file) 
+ and all other portions of this file are Copyright (c) 2013-2016 IDRIX
+ and are governed by the Apache License 2.0 the full text of which is
+ contained in the file License.txt included in VeraCrypt binary and source
+ code distribution packages.
 */
 
 #ifndef TC_HEADER_Volume_VolumeLayout
@@ -15,7 +19,7 @@
 #include "Volume/Pkcs5Kdf.h"
 #include "VolumeHeader.h"
 
-namespace TrueCrypt
+namespace VeraCrypt
 {
 	class VolumeLayout;
 	typedef list < shared_ptr <VolumeLayout> > VolumeLayoutList;
@@ -34,7 +38,7 @@
 		virtual uint32 GetHeaderSize () const { return HeaderSize; }
 		virtual uint64 GetMaxDataSize (uint64 volumeSize) const = 0;
 		virtual EncryptionAlgorithmList GetSupportedEncryptionAlgorithms () const { return SupportedEncryptionAlgorithms; }
-		virtual Pkcs5KdfList GetSupportedKeyDerivationFunctions () const { return Pkcs5Kdf::GetAvailableAlgorithms(); }
+		virtual Pkcs5KdfList GetSupportedKeyDerivationFunctions (bool truecryptMode) const { return Pkcs5Kdf::GetAvailableAlgorithms(truecryptMode); }
 		virtual EncryptionModeList GetSupportedEncryptionModes () const { return SupportedEncryptionModes; }
 		virtual VolumeType::Enum GetType () const { return Type; }
 		virtual bool HasBackupHeader () const = 0;
@@ -78,24 +82,6 @@
 	};
 
 
-	class VolumeLayoutV1Hidden : public VolumeLayout
-	{
-	public:
-		VolumeLayoutV1Hidden ();
-		virtual ~VolumeLayoutV1Hidden () { }
-
-		virtual int GetBackupHeaderOffset () const { throw NotApplicable (SRC_POS); }
-		virtual uint64 GetDataOffset (uint64 volumeHostSize) const;
-		virtual uint64 GetDataSize (uint64 volumeHostSize) const;
-		virtual uint64 GetMaxDataSize (uint64 volumeSize) const { throw NotApplicable (SRC_POS); }
-		virtual bool HasBackupHeader () const { return false; }
-
-	private:
-		VolumeLayoutV1Hidden (const VolumeLayoutV1Hidden &);
-		VolumeLayoutV1Hidden &operator= (const VolumeLayoutV1Hidden &);
-	};
-
-
 	class VolumeLayoutV2Normal : public VolumeLayout
 	{
 	public:
@@ -140,7 +126,7 @@
 		virtual uint64 GetDataOffset (uint64 volumeHostSize) const;
 		virtual uint64 GetDataSize (uint64 volumeHostSize) const;
 		virtual uint64 GetMaxDataSize (uint64 volumeSize) const { throw NotApplicable (SRC_POS); }
-		virtual Pkcs5KdfList GetSupportedKeyDerivationFunctions () const;
+		virtual Pkcs5KdfList GetSupportedKeyDerivationFunctions (bool truecryptMode) const;
 		virtual bool HasBackupHeader () const { return false; }
 		virtual bool HasDriveHeader () const { return true; }
 
