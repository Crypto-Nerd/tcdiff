--- ./Volume/VolumePassword.h	2012-02-07 14:36:48.000000000 +0400
+++ ../veracrypt_1.17_Source/src/Volume/VolumePassword.h	2016-02-14 12:11:21.000000000 +0300
@@ -1,9 +1,13 @@
 /*
- Copyright (c) 2008 TrueCrypt Developers Association. All rights reserved.
-
- Governed by the TrueCrypt License 3.0 the full text of which is contained in
- the file License.txt included in TrueCrypt binary and source code distribution
- packages.
+ Derived from source code of TrueCrypt 7.1a, which is
+ Copyright (c) 2008-2012 TrueCrypt Developers Association and which is governed
+ by the TrueCrypt License 3.0.
+
+ Modifications and additions to the original source code (contained in this file) 
+ and all other portions of this file are Copyright (c) 2013-2016 IDRIX
+ and are governed by the Apache License 2.0 the full text of which is
+ contained in the file License.txt included in VeraCrypt binary and source
+ code distribution packages.
 */
 
 #ifndef TC_HEADER_Encryption_Password
@@ -12,16 +16,14 @@
 #include "Platform/Platform.h"
 #include "Platform/Serializable.h"
 
-namespace TrueCrypt
+namespace VeraCrypt
 {
 	class VolumePassword : public Serializable
 	{
 	public:
 		VolumePassword ();
-		VolumePassword (const byte *password, size_t size);   
-		VolumePassword (const char *password, size_t size);
-		VolumePassword (const wchar_t *password, size_t charCount);
-		VolumePassword (const wstring &password);
+		VolumePassword (const byte *password, size_t size) { Set (password, size); }
+		VolumePassword (const SecureBuffer &password) { Set (password.Ptr (), password.Size ()); }
 		VolumePassword (const VolumePassword &password) { Set (password); }
 		virtual ~VolumePassword ();
 
@@ -31,13 +33,10 @@
 
 		operator BufferPtr () const { return BufferPtr (PasswordBuffer); }
 
-		void CheckPortability () const;
 		byte *DataPtr () const { return PasswordBuffer; }
 		bool IsEmpty () const { return PasswordSize == 0; }
 		size_t Size () const { return PasswordSize; }
 		void Set (const byte *password, size_t size);
-		void Set (const wchar_t *password, size_t charCount);
-		void Set (const ConstBufferPtr &password);
 		void Set (const VolumePassword &password);
 
 		TC_SERIALIZABLE (VolumePassword);
@@ -47,12 +46,10 @@
 
 	protected:
 		void AllocateBuffer ();
-		bool IsPortable () const;
 
 		SecureBuffer PasswordBuffer;
 
 		size_t PasswordSize;
-		bool Unportable;
 	};
 
 	struct PasswordException : public Exception
@@ -82,6 +79,8 @@
 	TC_EXCEPTION_NODECL (ProtectionPasswordKeyfilesIncorrect); \
 	TC_EXCEPTION (PasswordEmpty); \
 	TC_EXCEPTION (PasswordTooLong); \
+	TC_EXCEPTION (PasswordUTF8TooLong); \
+	TC_EXCEPTION (PasswordUTF8Invalid); \
 	TC_EXCEPTION (UnportablePassword);
 
 	TC_EXCEPTION_SET;
