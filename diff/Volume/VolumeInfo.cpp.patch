--- ./Volume/VolumeInfo.cpp	2012-02-07 14:36:48.000000000 +0400
+++ ../veracrypt_1.17_Source/src/Volume/VolumeInfo.cpp	2016-02-14 12:11:21.000000000 +0300
@@ -1,16 +1,20 @@
 /*
- Copyright (c) 2008-2009 TrueCrypt Developers Association. All rights reserved.
-
- Governed by the TrueCrypt License 3.0 the full text of which is contained in
- the file License.txt included in TrueCrypt binary and source code distribution
- packages.
+ Derived from source code of TrueCrypt 7.1a, which is
+ Copyright (c) 2008-2012 TrueCrypt Developers Association and which is governed
+ by the TrueCrypt License 3.0.
+
+ Modifications and additions to the original source code (contained in this file) 
+ and all other portions of this file are Copyright (c) 2013-2016 IDRIX
+ and are governed by the Apache License 2.0 the full text of which is
+ contained in the file License.txt included in VeraCrypt binary and source
+ code distribution packages.
 */
 
 #include "Common/Tcdefs.h"
 #include "VolumeInfo.h"
 #include "Platform/SerializerFactory.h"
 
-namespace TrueCrypt
+namespace VeraCrypt
 {
 	void VolumeInfo::Deserialize (shared_ptr <Stream> stream)
 	{
@@ -27,7 +31,7 @@
 		sr.Deserialize ("HiddenVolumeProtectionTriggered", HiddenVolumeProtectionTriggered);
 		LoopDevice = sr.DeserializeWString ("LoopDevice");
 
-		if (ProgramVersion >= 0x600)
+		if (ProgramVersion >= 0x10b)
 			sr.Deserialize ("MinRequiredProgramVersion", MinRequiredProgramVersion);
 
 		MountPoint = sr.DeserializeWString ("MountPoint");
@@ -39,10 +43,10 @@
 		sr.Deserialize ("Size", Size);
 		sr.Deserialize ("SlotNumber", SlotNumber);
 
-		if (ProgramVersion >= 0x620)
+		if (ProgramVersion >= 0x10b)
 			sr.Deserialize ("SystemEncryption", SystemEncryption);
 
-		if (ProgramVersion >= 0x600)
+		if (ProgramVersion >= 0x10b)
 			sr.Deserialize ("TopWriteOffset", TopWriteOffset);
 
 		sr.Deserialize ("TotalDataRead", TotalDataRead);
@@ -50,6 +54,8 @@
 		Type = static_cast <VolumeType::Enum> (sr.DeserializeInt32 ("Type"));
 		VirtualDevice = sr.DeserializeWString ("VirtualDevice");
 		sr.Deserialize ("VolumeCreationTime", VolumeCreationTime);
+		sr.Deserialize ("TrueCryptMode", TrueCryptMode);
+		sr.Deserialize ("Pim", Pim);
 	}
 
 	bool VolumeInfo::FirstVolumeMountedAfterSecond (shared_ptr <VolumeInfo> first, shared_ptr <VolumeInfo> second)
@@ -89,6 +95,8 @@
 		sr.Serialize ("Type", static_cast <uint32> (Type));
 		sr.Serialize ("VirtualDevice", wstring (VirtualDevice));
 		sr.Serialize ("VolumeCreationTime", VolumeCreationTime);
+		sr.Serialize ("TrueCryptMode", TrueCryptMode);
+		sr.Serialize ("Pim", Pim);
 	}
 
 	void VolumeInfo::Set (const Volume &volume)
@@ -103,7 +111,7 @@
 		HiddenVolumeProtectionTriggered = volume.IsHiddenVolumeProtectionTriggered();
 		MinRequiredProgramVersion = volume.GetHeader()->GetRequiredMinProgramVersion();
 		Path = volume.GetPath();
-		Pkcs5IterationCount = volume.GetPkcs5Kdf()->GetIterationCount();
+		Pkcs5IterationCount = volume.GetPkcs5Kdf()->GetIterationCount(volume.GetPim ());
 		Pkcs5PrfName = volume.GetPkcs5Kdf()->GetName();
 		Protection = volume.GetProtectionType();
 		Size = volume.GetSize();
@@ -112,6 +120,8 @@
 		TopWriteOffset = volume.GetTopWriteOffset();
 		TotalDataRead = volume.GetTotalDataRead();
 		TotalDataWritten = volume.GetTotalDataWritten();
+		TrueCryptMode = volume.GetTrueCryptMode();
+		Pim = volume.GetPim ();
 	}
 
 	TC_SERIALIZER_FACTORY_ADD_CLASS (VolumeInfo);
