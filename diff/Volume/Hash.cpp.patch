--- ./Volume/Hash.cpp	2012-02-07 14:36:48.000000000 +0400
+++ ../veracrypt_1.17_Source/src/Volume/Hash.cpp	2016-02-14 12:11:21.000000000 +0300
@@ -1,28 +1,31 @@
 /*
- Copyright (c) 2008 TrueCrypt Developers Association. All rights reserved.
-
- Governed by the TrueCrypt License 3.0 the full text of which is contained in
- the file License.txt included in TrueCrypt binary and source code distribution
- packages.
+ Derived from source code of TrueCrypt 7.1a, which is
+ Copyright (c) 2008-2012 TrueCrypt Developers Association and which is governed
+ by the TrueCrypt License 3.0.
+
+ Modifications and additions to the original source code (contained in this file) 
+ and all other portions of this file are Copyright (c) 2013-2016 IDRIX
+ and are governed by the Apache License 2.0 the full text of which is
+ contained in the file License.txt included in VeraCrypt binary and source
+ code distribution packages.
 */
 
 #include "Hash.h"
 
 #include "Crypto/Rmd160.h"
-#include "Crypto/Sha1.h"
 #include "Crypto/Sha2.h"
 #include "Crypto/Whirlpool.h"
 
-namespace TrueCrypt
+namespace VeraCrypt
 {
 	HashList Hash::GetAvailableAlgorithms ()
 	{
 		HashList l;
-
-		l.push_back (shared_ptr <Hash> (new Ripemd160 ()));
+		
 		l.push_back (shared_ptr <Hash> (new Sha512 ()));
 		l.push_back (shared_ptr <Hash> (new Whirlpool ()));
-		l.push_back (shared_ptr <Hash> (new Sha1 ()));
+		l.push_back (shared_ptr <Hash> (new Sha256 ()));
+		l.push_back (shared_ptr <Hash> (new Ripemd160 ()));
 
 		return l;
 	}
@@ -42,6 +45,7 @@
 	// RIPEMD-160
 	Ripemd160::Ripemd160 ()
 	{
+		Deprecated = true; // Mark RIPEMD-160 as deprecated like on Windows.
 		Context.Allocate (sizeof (RMD160_CTX));
 		Init();
 	}
@@ -63,29 +67,28 @@
 		RMD160Update ((RMD160_CTX *) Context.Ptr(), data.Get(), (int) data.Size());
 	}
 	
-	// SHA-1
-	Sha1::Sha1 ()
+	// SHA-256
+	Sha256::Sha256 ()
 	{
-		Deprecated = true;
-		Context.Allocate (sizeof (sha1_ctx));
+		Context.Allocate (sizeof (sha256_ctx));
 		Init();
 	}
 
-	void Sha1::GetDigest (const BufferPtr &buffer)
+	void Sha256::GetDigest (const BufferPtr &buffer)
 	{
 		if_debug (ValidateDigestParameters (buffer));
-		sha1_end (buffer, (sha1_ctx *) Context.Ptr());
+		sha256_end (buffer, (sha256_ctx *) Context.Ptr());
 	}
 
-	void Sha1::Init ()
+	void Sha256::Init ()
 	{
-		sha1_begin ((sha1_ctx *) Context.Ptr());
+		sha256_begin ((sha256_ctx *) Context.Ptr());
 	}
 
-	void Sha1::ProcessData (const ConstBufferPtr &data)
+	void Sha256::ProcessData (const ConstBufferPtr &data)
 	{
 		if_debug (ValidateDataParameters (data));
-		sha1_hash (data.Get(), (int) data.Size(), (sha1_ctx *) Context.Ptr());
+		sha256_hash (data.Get(), (int) data.Size(), (sha256_ctx *) Context.Ptr());
 	}
 
 	// SHA-512
