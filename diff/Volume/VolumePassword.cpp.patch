--- ./Volume/VolumePassword.cpp	2012-02-07 14:36:48.000000000 +0400
+++ ../veracrypt_1.17_Source/src/Volume/VolumePassword.cpp	2016-02-14 12:11:21.000000000 +0300
@@ -1,42 +1,26 @@
 /*
- Copyright (c) 2008 TrueCrypt Developers Association. All rights reserved.
-
- Governed by the TrueCrypt License 3.0 the full text of which is contained in
- the file License.txt included in TrueCrypt binary and source code distribution
- packages.
+ Derived from source code of TrueCrypt 7.1a, which is
+ Copyright (c) 2008-2012 TrueCrypt Developers Association and which is governed
+ by the TrueCrypt License 3.0.
+
+ Modifications and additions to the original source code (contained in this file) 
+ and all other portions of this file are Copyright (c) 2013-2016 IDRIX
+ and are governed by the Apache License 2.0 the full text of which is
+ contained in the file License.txt included in VeraCrypt binary and source
+ code distribution packages.
 */
 
 #include "VolumePassword.h"
 #include "Platform/SerializerFactory.h"
 #include "Platform/StringConverter.h"
 
-namespace TrueCrypt
+namespace VeraCrypt
 {
-	VolumePassword::VolumePassword () : PasswordSize (0), Unportable (false)
+	VolumePassword::VolumePassword () : PasswordSize (0)
 	{
 		AllocateBuffer ();
 	}
 
-	VolumePassword::VolumePassword (const char *password, size_t size)
-	{
-		Set ((const byte *) password, size);
-	}
-
-	VolumePassword::VolumePassword (const byte *password, size_t size)
-	{
-		Set (password, size);
-	}
-
-	VolumePassword::VolumePassword (const wchar_t *password, size_t charCount)
-	{
-		Set (password, charCount);
-	}
-
-	VolumePassword::VolumePassword (const wstring &password)
-	{
-		Set (password.c_str(), password.size());
-	}
-
 	VolumePassword::~VolumePassword ()
 	{
 	}
@@ -47,12 +31,6 @@
 			PasswordBuffer.Allocate (MaxSize);
 	}
 
-	void VolumePassword::CheckPortability () const
-	{
-		if (Unportable || !IsPortable())
-			throw UnportablePassword (SRC_POS);
-	}
-
 	void VolumePassword::Deserialize (shared_ptr <Stream> stream)
 	{
 		Serializer sr (stream);
@@ -65,16 +43,6 @@
 		sr.Deserialize ("WipeData", wipeBuffer);
 	}
 
-	bool VolumePassword::IsPortable () const
-	{
-		for (size_t i = 0; i < PasswordSize; i++)
-		{
-			if (PasswordBuffer[i] >= 0x7f || PasswordBuffer[i] < 0x20)
-				return false;
-		}
-		return true;
-	}
-
 	void VolumePassword::Serialize (shared_ptr <Stream> stream) const
 	{
 		Serializable::Serialize (stream);
@@ -94,62 +62,12 @@
 		
 		if (size > MaxSize)
 			throw PasswordTooLong (SRC_POS);
-		
-		PasswordBuffer.CopyFrom (ConstBufferPtr (password, size));
-		PasswordSize = size;
-
-		Unportable = !IsPortable();
-	}
-	
-	void VolumePassword::Set (const wchar_t *password, size_t charCount)
-	{
-		if (charCount > MaxSize)
-			throw PasswordTooLong (SRC_POS);
-
-		union Conv
-		{
-			byte b[sizeof (wchar_t)];
-			wchar_t c;
-		};
 
-		Conv conv;
-		conv.c = L'A';
-		
-		int lsbPos = -1;
-		for (size_t i = 0; i < sizeof (conv.b); ++i)
-		{
-			if (conv.b[i] == L'A')
-			{
-				lsbPos = i;
-				break;
-			}
-		}
-
-		if (lsbPos == -1)
-			throw ParameterIncorrect (SRC_POS);
-
-		bool unportable = false;
-		byte passwordBuf[MaxSize];
-		for (size_t i = 0; i < charCount; ++i)
-		{
-			conv.c = password[i];
-			passwordBuf[i] = conv.b[lsbPos];
-			for (int j = 0; j < (int) sizeof (wchar_t); ++j)
-			{
-				if (j != lsbPos && conv.b[j] != 0)
-					unportable = true;
-			}
-		}
-		
-		Set (passwordBuf, charCount);
-		
-		if (unportable)
-			Unportable = true;
-	}
+		PasswordBuffer.Erase ();
+		if (size > 0)
+			PasswordBuffer.CopyFrom (ConstBufferPtr (password, size));
 
-	void VolumePassword::Set (const ConstBufferPtr &password)
-	{
-		Set (password, password.Size());
+		PasswordSize = size;
 	}
 	
 	void VolumePassword::Set (const VolumePassword &password)
