--- ./Volume/VolumeHeader.cpp	2012-02-07 14:36:48.000000000 +0400
+++ ../veracrypt_1.17_Source/src/Volume/VolumeHeader.cpp	2016-02-14 12:11:21.000000000 +0300
@@ -1,9 +1,13 @@
 /*
- Copyright (c) 2008-2010 TrueCrypt Developers Association. All rights reserved.
-
- Governed by the TrueCrypt License 3.0 the full text of which is contained in
- the file License.txt included in TrueCrypt binary and source code distribution
- packages.
+ Derived from source code of TrueCrypt 7.1a, which is
+ Copyright (c) 2008-2012 TrueCrypt Developers Association and which is governed
+ by the TrueCrypt License 3.0.
+
+ Modifications and additions to the original source code (contained in this file) 
+ and all other portions of this file are Copyright (c) 2013-2016 IDRIX
+ and are governed by the Apache License 2.0 the full text of which is
+ contained in the file License.txt included in VeraCrypt binary and source
+ code distribution packages.
 */
 
 #include "Crc32.h"
@@ -14,7 +18,7 @@
 #include "VolumeException.h"
 #include "Common/Crypto.h"
 
-namespace TrueCrypt
+namespace VeraCrypt
 {
 	VolumeHeader::VolumeHeader (uint32 size)
 	{
@@ -78,7 +82,7 @@
 		EncryptNew (headerBuffer, options.Salt, options.HeaderKey, options.Kdf);
 	}
 
-	bool VolumeHeader::Decrypt (const ConstBufferPtr &encryptedData, const VolumePassword &password, const Pkcs5KdfList &keyDerivationFunctions, const EncryptionAlgorithmList &encryptionAlgorithms, const EncryptionModeList &encryptionModes)
+	bool VolumeHeader::Decrypt (const ConstBufferPtr &encryptedData, const VolumePassword &password, int pim, shared_ptr <Pkcs5Kdf> kdf, bool truecryptMode, const Pkcs5KdfList &keyDerivationFunctions, const EncryptionAlgorithmList &encryptionAlgorithms, const EncryptionModeList &encryptionModes)
 	{
 		if (password.Size() < 1)
 			throw PasswordEmpty (SRC_POS);
@@ -89,7 +93,10 @@
 
 		foreach (shared_ptr <Pkcs5Kdf> pkcs5, keyDerivationFunctions)
 		{
-			pkcs5->DeriveKey (headerKey, password, salt);
+			if (kdf && (kdf->GetName() != pkcs5->GetName()))
+				continue;
+
+			pkcs5->DeriveKey (headerKey, password, pim, salt);
 
 			foreach (shared_ptr <EncryptionMode> mode, encryptionModes)
 			{
@@ -118,7 +125,7 @@
 					header.CopyFrom (encryptedData.GetRange (EncryptedHeaderDataOffset, EncryptedHeaderDataSize));
 					ea->Decrypt (header);
 
-					if (Deserialize (header, ea, mode))
+					if (Deserialize (header, ea, mode, truecryptMode))
 					{
 						EA = ea;
 						Pkcs5 = pkcs5;
@@ -131,15 +138,21 @@
 		return false;
 	}
 
-	bool VolumeHeader::Deserialize (const ConstBufferPtr &header, shared_ptr <EncryptionAlgorithm> &ea, shared_ptr <EncryptionMode> &mode)
+	bool VolumeHeader::Deserialize (const ConstBufferPtr &header, shared_ptr <EncryptionAlgorithm> &ea, shared_ptr <EncryptionMode> &mode, bool truecryptMode)
 	{
 		if (header.Size() != EncryptedHeaderDataSize)
 			throw ParameterIncorrect (SRC_POS);
 
-		if (header[0] != 'T' ||
+		if (truecryptMode && (header[0] != 'T' ||
 			header[1] != 'R' ||
 			header[2] != 'U' ||
-			header[3] != 'E')
+			header[3] != 'E'))
+			return false;
+
+		if (!truecryptMode && (header[0] != 'V' ||
+			header[1] != 'E' ||
+			header[2] != 'R' ||
+			header[3] != 'A'))
 			return false;
 
 		size_t offset = 4;
@@ -160,9 +173,16 @@
 
 		RequiredMinProgramVersion = DeserializeEntry <uint16> (header, offset);
 		
-		if (RequiredMinProgramVersion > Version::Number())
+		if (!truecryptMode && (RequiredMinProgramVersion > Version::Number()))
 			throw HigherVersionRequired (SRC_POS);
 
+		if (truecryptMode)
+		{
+			if (RequiredMinProgramVersion < 0x600 || RequiredMinProgramVersion > 0x71a)
+				throw UnsupportedTrueCryptFormat (SRC_POS);
+			RequiredMinProgramVersion = CurrentRequiredMinProgramVersion;
+		}
+
 		VolumeKeyAreaCrc32 = DeserializeEntry <uint32> (header, offset);
 		VolumeCreationTime = DeserializeEntry <uint64> (header, offset);
 		HeaderCreationTime = DeserializeEntry <uint64> (header, offset);
@@ -184,7 +204,7 @@
 			throw ParameterIncorrect (SRC_POS);
 		}
 
-#if !(defined (TC_WINDOWS) || defined (TC_LINUX))
+#if !(defined (TC_WINDOWS) || defined (TC_LINUX) || defined (TC_MACOSX))
 		if (SectorSize != TC_SECTOR_SIZE_LEGACY)
 			throw UnsupportedSectorSize (SRC_POS);
 #endif
@@ -285,10 +305,10 @@
 
 		header.Zero();
 
-		header[0] = 'T';
-		header[1] = 'R';
-		header[2] = 'U';
-		header[3] = 'E';
+		header[0] = 'V';
+		header[1] = 'E';
+		header[2] = 'R';
+		header[3] = 'A';
 		size_t offset = 4;
 
 		header.GetRange (DataAreaKeyOffset, DataAreaKey.Size()).CopyFrom (DataAreaKey);
